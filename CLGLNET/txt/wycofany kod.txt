    float[] vertices = {
    // Trójkąt 1
    -0.5f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f,
   -0.5f, -0.5f, 0.0f,  0.0f, 0.0f, 1.0f,
    0.5f, -0.5f, 0.0f,  0.0f, 0.0f, 1.0f,
    // Trójkąt 2
    -1.0f, 1.0f, 0.0f,  0.0f, 0.0f, 1.0f,
    1.0f,  -1.0f, 0.0f,  0.0f, 0.0f, 1.0f,
    1.0f, 1.0f, 0.0f,  0.0f, 0.0f, 1.0f,
};




            //GL.GenBuffers(1, out vbo);
            //GL.BindBuffer(BufferTarget.ArrayBuffer, vbo);
            //GL.BufferData(BufferTarget.ArrayBuffer, sizeof(Punkt) * N_X * N_Y, IntPtr.Zero, BufferUsageHint.DynamicDraw);




            #region pierwotnie zaproponowane - stry zestaw danych - wykomentowane
            /*
            GL.BindBuffer(BufferTarget.ArrayBuffer, vbo);
            GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, sizeof(Punkt), IntPtr.Zero);
            GL.EnableVertexAttribArray(0);

            GL.BindBuffer(BufferTarget.ArrayBuffer, nbo);
            GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, sizeof(PunktNormal), IntPtr.Zero);
            GL.EnableVertexAttribArray(1);
            */
            #endregion

        /*

        static unsafe void InitOpenGL()
        {
            GL.GenBuffers(1, out vbo);
            GL.BindBuffer(BufferTarget.ArrayBuffer, vbo);
            GL.BufferData(BufferTarget.ArrayBuffer, sizeof(Punkt) * N_X * N_Y, IntPtr.Zero, BufferUsageHint.DynamicDraw);

            GL.GenBuffers(1, out nbo);
            GL.BindBuffer(BufferTarget.ArrayBuffer, nbo);
            GL.BufferData(BufferTarget.ArrayBuffer, sizeof(Normal) * N_X * N_Y, IntPtr.Zero, BufferUsageHint.DynamicDraw);
        }

        static void InitOpenCL()
        {
            var platforms = CL.GetPlatformIDs();
            var devices = CL.GetDeviceIDs(platforms[0], DeviceType.Gpu);
            clContext = CL.CreateContext(null, devices, null, IntPtr.Zero);
            queue = CL.CreateCommandQueue(clContext, devices[0], CommandQueueProperties.None);

            string kernelSource = File.ReadAllText("kernel.cl");
            var program = CL.CreateProgramWithSource(clContext, kernelSource);
            CL.BuildProgram(program, devices, string.Empty);
            kernel = CL.CreateKernel(program, "obliczWspolrzedneINormalne");

            aaBuf = CL.CreateBuffer(clContext, MemFlags.ReadOnly, sizeof(Punkt) * N_X * N_Y);
            bbBuf = CL.CreateBuffer(clContext, MemFlags.ReadWrite, sizeof(Punkt) * N_X * N_Y);
            clNbo = CL.CreateBuffer(clContext, MemFlags.WriteOnly, sizeof(Normal) * N_X * N_Y);
        }

        static unsafe void RunKernel(Punkt[] aa, float dt, float w, int N_X, int N_Y)
        {
            CL.EnqueueWriteBuffer(queue, aaBuf, true, 0, sizeof(Punkt) * N_X * N_Y, aa);

            CL.SetKernelArg(kernel, 0, aaBuf);
            CL.SetKernelArg(kernel, 1, bbBuf);
            CL.SetKernelArg(kernel, 2, clNbo);
            CL.SetKernelArg(kernel, 3, dt);
            CL.SetKernelArg(kernel, 4, w);
            CL.SetKernelArg(kernel, 5, N_X);
            CL.SetKernelArg(kernel, 6, N_Y);

            GL.Finish();
            CL.EnqueueAcquireGLObjects(queue, new[] { clNbo });

            var globalWorkSize = new IntPtr[] { (IntPtr)N_X, (IntPtr)N_Y };
            CL.EnqueueNDRangeKernel(queue, kernel, 2, null, globalWorkSize, null);

            CL.EnqueueReleaseGLObjects(queue, new[] { clNbo });
            CL.Finish(queue);
        }

        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);

            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            GL.BindBuffer(BufferTarget.ArrayBuffer, vbo);
            GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, sizeof(Punkt), IntPtr.Zero);
            GL.EnableVertexAttribArray(0);

            GL.BindBuffer(BufferTarget.ArrayBuffer, nbo);
            GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, sizeof(Normal), IntPtr.Zero);
            GL.EnableVertexAttribArray(1);

            // ... (rysowanie obiektów)

            SwapBuffers();
        }
        */

         unsafe void RunKernel(Punkt[] aa)
        {
            lock (_bufferLock)
            {
                queue.WriteToBuffer(aa, aaBuf, true, null);

                kernel.SetMemoryArgument(0, aaBuf);
                kernel.SetMemoryArgument(1, bbBuf);
                kernel.SetValueArgument(2, dt);
                kernel.SetValueArgument(3, w);
                kernel.SetValueArgument(4, N_X);
                kernel.SetValueArgument(5, N_Y);

                //do wzbudzenia fal
                kernel.SetValueArgument(6, (float)Math.Sin(czas));
                kernel.SetValueArgument(7, czas);


                kernelTrujkatow.SetMemoryArgument(0, bbBuf);
                kernelTrujkatow.SetMemoryArgument(1, clNbo);
                kernelTrujkatow.SetValueArgument(2, N_X);
                kernelTrujkatow.SetValueArgument(3, N_Y);

                GL.Finish();
                //queue.AcquireGLObjects(new[] { clNbo }, null);

                var globalWorkSize = new long[] { N_X, N_Y };

                queue.Execute(kernel, null, globalWorkSize, null, null);
                queue.Execute(kernelTrujkatow, null, globalWorkSize, null, null);


                queue.ReadFromBuffer(clNbo, ref punktyINormalne, true, null);

                //queue.ReleaseGLObjects(new[] { clNbo }, null);
                queue.Finish();
            }
        }

        unsafe void InitOpenCL()
        {
            var platform = ComputePlatform.Platforms[0];
            var devices = platform.Devices;

            clContext = new ComputeContext(devices, new ComputeContextPropertyList(platform), null, IntPtr.Zero);
            queue = new ComputeCommandQueue(clContext, devices[0], ComputeCommandQueueFlags.None);

            string kernelSource = File.ReadAllText("kernel.cl");
            var program = new ComputeProgram(clContext, kernelSource);
            program.Build(devices, null, null, IntPtr.Zero);
            kernel = program.CreateKernel("obliczWspolrzedne");
            kernelTrujkatow = program.CreateKernel("obliczNormalne");
            kernelPrzygotujTrojkaty = program.CreateKernel("przygotujTrojkaty");

            aaBuf = new ComputeBuffer<Punkt>(clContext, ComputeMemoryFlags.ReadWrite | ComputeMemoryFlags.CopyHostPointer, new Punkt[N_X * N_Y]);
            bbBuf = new ComputeBuffer<Punkt>(clContext, ComputeMemoryFlags.ReadWrite, N_X * N_Y);
            //clNbo = new ComputeBuffer<PunktNormal>(clContext, ComputeMemoryFlags.WriteOnly, N_X * N_Y);
            clNbo = new ComputeBuffer<PunktNormal>(clContext, ComputeMemoryFlags.ReadWrite, N_X * N_Y);

            //vertexBuffer = ComputeBuffer<float>.CreateFromGLBuffer<float>(clContext, ComputeMemoryFlags.ReadWrite, 1);// nbo);
            vertexBuffer = new ComputeBuffer<float>(clContext, ComputeMemoryFlags.ReadWrite, N_X * N_Y*4*18);



            queue.WriteToBuffer(aa, aaBuf, true, null);
        }

        void UpdateSinglePoint(int index, Punkt newValue)
        {
            //queue.WriteToBuffer(new Punkt[] { newValue }, aaBuf, true, new IntPtr(index * Marshal.SizeOf(typeof(Punkt))), 0, 1, null);
            // Update the value in the local array
            //punktyINormalne[index].x = newValue.x;
            //punktyINormalne[index].y = newValue.y;
            //punktyINormalne[index].z = 5;

            // Write the updated value to the OpenCL buffer
            //queue.WriteToBuffer(new Punkt[] { newValue }, aaBuf, true, new IntPtr(index * Marshal.SizeOf(typeof(Punkt))), null);
        }

                //async Task Akcja()
        //{
        //    bool kt = false;
        //    while (true)
        //    {
        //        kt = RunKernelUpdate(kt, czas);
        //        czas += dt;

        //        float[] vertices2 = PrzygotujTrojkaty(punktyINormalne);

        //        PrzygotowanieBufora(vertices2);

        //        Thread.Sleep(300);


        //    }

        //}


                            //float[] vertices2 = PrzygotujTrojkaty(punktyINormalne);

                    //PrzygotowanieBufora(vertices2);
      private float[] PrzygotujTrojkaty(PunktNormal[] wieszcholki)
        {
            List<float> vertices = new List<float>();

            for (int i = 0; i < N_Y - 1; i++)
                for (int j = 0; j < N_X - 1; j++)
                {
                    AddVwrtex(vertices, wieszcholki, i, j);
                    AddVwrtex(vertices, wieszcholki, i, j + 1);
                    AddVwrtex(vertices, wieszcholki, i + 1, j);
                }

            return vertices.ToArray();
        }

        private void AddVwrtex(List<float> vertices, PunktNormal[] wieszcholki, int i, int j)
        {
            vertices.Add(wieszcholki[i * N_Y + j].x - 40f);
            vertices.Add(wieszcholki[i * N_Y + j].y - 40f);
            vertices.Add(wieszcholki[i * N_Y + j].z);
            vertices.Add(wieszcholki[i * N_Y + j].nx);
            vertices.Add(wieszcholki[i * N_Y + j].ny);
            vertices.Add(wieszcholki[i * N_Y + j].nz);
        }

                        //CL.EnqueueReadBuffer(queue, vertexBuffer, true, IntPtr.Zero, vertices, 0, null, out _);
                //CL.EnqueueReadBuffer(queue, vertexBuffer, true, IntPtr.Zero, (nuint)(vertices.Length * sizeof(float)), vertices, 0, null, out _);
                //CL.EnqueueReadBuffer(queue, vertexBuffer, true, (nuint)0, (nuint)(vertices.Length * sizeof(float)), vertices, 0, null, out _);
                //CL.EnqueueReadBuffer(queue, vertexBuffer, true, IntPtr.Zero, vertices.Length * sizeof(float), vertices, 0, null, out _);

 //async Task Akcja()
        //{
        //    bool kt = false;
        //    while (true)
        //    {
        //        lock (_syncLock)
        //        {
        //            kt = RunKernel(kt, czas);
        //            czas += dt;

        //        }
        //        Thread.Sleep(1000);
        //        //await Task.Delay(1000);
        //    }
        //}
        
                //var punktyINormalne = new PunktNormal[N_X * N_Y];
                //var punkty = new Punkt[N_X * N_Y];  

                // Odczyt danych z bufora
                //CL.EnqueueReadBuffer(queue, vertexBuffer, true, (nuint)0, (nuint)(vertices.Length * sizeof(float)), (nint)GCHandle.Alloc(vertices, GCHandleType.Pinned).AddrOfPinnedObject(), 0, null, out _);
                            
                //CL.EnqueueReadBuffer(queue, vertexBuffer, true, UIntPtr.Zero, punkty, 0, null, out clEvent);
                //CL.EnqueueReadBuffer(queue, clNbo, true, (nuint)0, (nuint)(punktyINormalne.Length * sizeof(PunktNormal)), (nint)GCHandle.Alloc(punktyINormalne, GCHandleType.Pinned).AddrOfPinnedObject(), 0, null, out _);
                //CL.EnqueueReadBuffer(queue, b1, true, (nuint)0, (nuint)(punkty.Length * sizeof(Punkt)), (nint)GCHandle.Alloc(punkty, GCHandleType.Pinned).AddrOfPinnedObject(), 0, null, out _);

#version 330 core
out vec4 FragColor;
void main()
{
    FragColor = vec4(1.0, 0.5, 0.2, 1.0);
}

#version 330 core
layout(location = 0) in vec3 aPosition;
layout(location = 1) in vec3 aNormal;

uniform mat4 rotationMatrix;
uniform mat4 projection;
out vec3 Normal;

void main()
{
    gl_Position = projection * rotationMatrix * vec4(aPosition, 1.0);
    Normal = aNormal;
}

            /*
            base.OnRenderFrame(e);

            GL.Clear(ClearBufferMask.ColorBufferBit);
            //CheckGLError("GL.Clear");

            GL.UseProgram(_shaderProgram);
            //CheckGLError("GL.UseProgram");

            GL.BindVertexArray(_vertexArrayObject);
            //CheckGLError("GL.BindVertexArray");

            //GL.LoadIdentity();
            //CheckGLError("GL.LoadIdentity");

            // Rotate the image
            Matrix4 rotationMatrixZ = Matrix4.CreateRotationZ(MathHelper.DegreesToRadians(45.0f)); // Rotate 10 degrees around X axis
            Matrix4 rotationMatrixX = Matrix4.CreateRotationX(MathHelper.DegreesToRadians(30.0f)); // Rotate 30 degrees around Y axis
            Matrix4 rotationMatrix = rotationMatrixZ * rotationMatrixX; // Combine rotations

            Matrix4 projection = Matrix4.CreateOrthographic(150.0f, 150.0f, -50.0f, 50.0f);
            GL.UniformMatrix4(GL.GetUniformLocation(_shaderProgram, "projection"), false, ref projection);
            //CheckGLError("GL.UniformMatrix4 (projection)");

            int location = GL.GetUniformLocation(_shaderProgram, "rotationMatrix");
            GL.UniformMatrix4(location, false, ref rotationMatrix);
            //CheckGLError("GL.UniformMatrix4 (rotationMatrix)");

            GL.DrawArrays(PrimitiveType.Triangles, 0, N_X * N_Y * 2);
            //CheckGLError("GL.DrawArrays");

            SwapBuffers();
            //CheckGLError("SwapBuffers");
            */
            //nowe: