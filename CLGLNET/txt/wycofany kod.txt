            //GL.GenBuffers(1, out vbo);
            //GL.BindBuffer(BufferTarget.ArrayBuffer, vbo);
            //GL.BufferData(BufferTarget.ArrayBuffer, sizeof(Punkt) * N_X * N_Y, IntPtr.Zero, BufferUsageHint.DynamicDraw);




            #region pierwotnie zaproponowane - stry zestaw danych - wykomentowane
            /*
            GL.BindBuffer(BufferTarget.ArrayBuffer, vbo);
            GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, sizeof(Punkt), IntPtr.Zero);
            GL.EnableVertexAttribArray(0);

            GL.BindBuffer(BufferTarget.ArrayBuffer, nbo);
            GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, sizeof(PunktNormal), IntPtr.Zero);
            GL.EnableVertexAttribArray(1);
            */
            #endregion

        /*

        static unsafe void InitOpenGL()
        {
            GL.GenBuffers(1, out vbo);
            GL.BindBuffer(BufferTarget.ArrayBuffer, vbo);
            GL.BufferData(BufferTarget.ArrayBuffer, sizeof(Punkt) * N_X * N_Y, IntPtr.Zero, BufferUsageHint.DynamicDraw);

            GL.GenBuffers(1, out nbo);
            GL.BindBuffer(BufferTarget.ArrayBuffer, nbo);
            GL.BufferData(BufferTarget.ArrayBuffer, sizeof(Normal) * N_X * N_Y, IntPtr.Zero, BufferUsageHint.DynamicDraw);
        }

        static void InitOpenCL()
        {
            var platforms = CL.GetPlatformIDs();
            var devices = CL.GetDeviceIDs(platforms[0], DeviceType.Gpu);
            clContext = CL.CreateContext(null, devices, null, IntPtr.Zero);
            queue = CL.CreateCommandQueue(clContext, devices[0], CommandQueueProperties.None);

            string kernelSource = File.ReadAllText("kernel.cl");
            var program = CL.CreateProgramWithSource(clContext, kernelSource);
            CL.BuildProgram(program, devices, string.Empty);
            kernel = CL.CreateKernel(program, "obliczWspolrzedneINormalne");

            aaBuf = CL.CreateBuffer(clContext, MemFlags.ReadOnly, sizeof(Punkt) * N_X * N_Y);
            bbBuf = CL.CreateBuffer(clContext, MemFlags.ReadWrite, sizeof(Punkt) * N_X * N_Y);
            clNbo = CL.CreateBuffer(clContext, MemFlags.WriteOnly, sizeof(Normal) * N_X * N_Y);
        }

        static unsafe void RunKernel(Punkt[] aa, float dt, float w, int N_X, int N_Y)
        {
            CL.EnqueueWriteBuffer(queue, aaBuf, true, 0, sizeof(Punkt) * N_X * N_Y, aa);

            CL.SetKernelArg(kernel, 0, aaBuf);
            CL.SetKernelArg(kernel, 1, bbBuf);
            CL.SetKernelArg(kernel, 2, clNbo);
            CL.SetKernelArg(kernel, 3, dt);
            CL.SetKernelArg(kernel, 4, w);
            CL.SetKernelArg(kernel, 5, N_X);
            CL.SetKernelArg(kernel, 6, N_Y);

            GL.Finish();
            CL.EnqueueAcquireGLObjects(queue, new[] { clNbo });

            var globalWorkSize = new IntPtr[] { (IntPtr)N_X, (IntPtr)N_Y };
            CL.EnqueueNDRangeKernel(queue, kernel, 2, null, globalWorkSize, null);

            CL.EnqueueReleaseGLObjects(queue, new[] { clNbo });
            CL.Finish(queue);
        }

        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);

            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            GL.BindBuffer(BufferTarget.ArrayBuffer, vbo);
            GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, sizeof(Punkt), IntPtr.Zero);
            GL.EnableVertexAttribArray(0);

            GL.BindBuffer(BufferTarget.ArrayBuffer, nbo);
            GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, sizeof(Normal), IntPtr.Zero);
            GL.EnableVertexAttribArray(1);

            // ... (rysowanie obiektów)

            SwapBuffers();
        }
        */