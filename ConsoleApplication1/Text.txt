
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(0, 0.0f, 1.0f, 0.0f);
	glVertexAttrib3f(0, -1.0f, -1.0f, 0.0f);
	glVertexAttrib3f(0, 1.0f, -1.0f, 0.0f);
	glEnd();

	//// Przekszta�cenie macierzy modelu dla drugiego tr�jk�ta
	//model = glm::translate(model, glm::vec3(1.5f, 0.0f, 0.0f)); // Przesuni�cie
	//model = glm::rotate(model, glm::radians(45.0f), glm::vec3(0.0f, 0.0f, 1.0f)); // Obr�t
	//glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));


	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(0, 0.0f, 1.0f, 0.0f);
	glVertexAttrib3f(0, 1.0f, 1.0f, -2.0f);
	glVertexAttrib3f(0, 2.0f, -1.0f, 0.0f);
	glEnd();
	
	/*
	// Rysowanie pierwszego tr�jk�ta
	glBindVertexArray(VAO);
	glDrawArrays(GL_TRIANGLES, 0, 3);

	// Przekszta�cenie macierzy modelu dla drugiego tr�jk�ta
	model = glm::translate(model, glm::vec3(1.5f, 0.0f, 0.0f)); // Przesuni�cie
	model = glm::rotate(model, glm::radians(45.0f), glm::vec3(0.0f, 0.0f, 1.0f)); // Obr�t
	glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));

	// Rysowanie drugiego tr�jk�ta
	glDrawArrays(GL_TRIANGLES, 0, 3);
	*/


		myfale = new Fale();
	myfale->Inicjuj(1);
	myfale->InicjujStrune(dwa_osrodki, 1);

	myfale->PogiezPlat();

	glutDisplayFunc(display);
	glutReshapeFunc(reshape);


	//while (true) {
	//	SetPlat(myfale->PogiezPlat(), 50, 30, 40);
	//	std::this_thread::sleep_for(std::chrono::milliseconds(100));
	//}

	#version 330 core
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
out vec3 fragNormal;
out vec3 fragPosition;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main() {
    vec3 p1 = position;
    vec3 p2 = vec3(gl_VertexID == 0 ? 1.0 : 0.0, gl_VertexID == 1 ? 1.0 : 0.0, gl_VertexID == 2 ? 1.0 : 0.0);
    vec3 p3 = vec3(gl_VertexID == 0 ? 0.0 : 1.0, gl_VertexID == 1 ? 0.0 : 1.0, gl_VertexID == 2 ? 0.0 : 1.0);

    vec3 U = p2 - p1;
    vec3 V = p3 - p1;
    vec3 calculatedNormal = normalize(cross(U, V));

    fragPosition = vec3(model * vec4(position, 1.0));
    fragNormal = mat3(transpose(inverse(model))) * calculatedNormal;
    gl_Position = projection * view * vec4(fragPosition, 1.0);
}

#version 330 core
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
out vec3 fragNormal;
out vec3 fragPosition;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
void main() {
    fragPosition = vec3(model * vec4(position, 1.0));
    fragNormal = mat3(transpose(inverse(model))) * normal;
    gl_Position = projection * view * vec4(fragPosition, 1.0);
}



#version 330 core
in vec3 fragNormal;
in vec3 fragPosition;
out vec4 color;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
void main() {
    // Ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
// Diffuse
    vec3 norm = normalize(fragNormal);
    vec3 lightDir = normalize(lightPos - fragPosition);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
// Specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - fragPosition);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;
vec3 result = (ambient + diffuse + specular) * objectColor;
    color = vec4(result, 1.0);
    
    
    //vec3 normalizedNormal = normalize(fragNormal);
    //color = vec4(normalizedNormal * 0.5 + 0.5, 1.0); // Normalizowanie i skalowanie do zakresu [0, 1]
    //color = objectColor;
}

        //punorm[i * N_Y + j].x = i;
        //punorm[i * N_Y + j].y = j;
        //punorm[i * N_Y + j].z = bb[i * N_Y + j].x * 20;
        //punorm[i * N_Y + j].nx = 0.0;
        //punorm[i * N_Y + j].ny = 0.0;
        //punorm[i * N_Y + j].nz = 1.0;

		        //punorm[i * N_Y + j].x = i;
        //punorm[i * N_Y + j].y = j;
        //punorm[i * N_Y + j].z = bb[i * N_Y + j].x * 20;
        //punorm[i * N_Y + j].nx = normal.x;
        //punorm[i * N_Y + j].ny = normal.y;
        //punorm[i * N_Y + j].nz = normal.z;

        //struct PunktNormal
//{
//    float x;
//    float y;
//    float z;
//    float nx;
//    float ny;
//    float nz;
//};


